# -*- coding: utf-8 -*-
"""no3_UTS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Se8RUXGNMcpBXwoosOU05ioqUq1pp7xL
"""

import pandas as pd
import joblib
import streamlit as st

# Load the trained XGBoost model and encoders
model = joblib.load('xgboost_model.pkl')  # Load the trained XGBoost model
label_encoder_gender = joblib.load('label_encoder_gender.pkl')  # Load label encoder for 'person_gender'
label_encoder_defaults = joblib.load('label_encoder_defaults.pkl')  # Load label encoder for 'previous_loan_defaults_on_file'
label_encoder_home = joblib.load('label_encoder_home.pkl')  # Load label encoder for 'person_home_ownership'
label_encoder_loan_intent = joblib.load('label_encoder_loan_intent.pkl')  # Load label encoder for 'loan_intent'
ordinal_encoder_education = joblib.load('ordinal_encoder_education.pkl')  # Load ordinal encoder for 'person_education'

def main():
    st.title('Booking Status Prediction Model')

    # Add user input components for all features
    person_age = st.number_input('Person Age', min_value=0, max_value=100, value=30)
    person_gender = st.selectbox('Person Gender', ['Male', 'Female'])
    person_education = st.selectbox('Person Education', ['High School', 'Associate', 'Bachelor', 'Master', 'Doctorate'])
    person_income = st.number_input('Person Income', min_value=0, value=50000)
    person_emp_exp = st.number_input('Person Employment Experience (years)', min_value=0, max_value=100, value=5)
    person_home_ownership = st.selectbox('Person Home Ownership', ['OWN', 'RENT', 'MORTGAGE', 'OTHER'])
    loan_amnt = st.number_input('Loan Amount', min_value=1000, max_value=35000, value=10000)
    loan_intent = st.selectbox('Loan Intent', ['EDUCATION', 'DEBTCONSOLIDATION', 'VENTURE', 'PERSONAL', 'MEDICAL', 'HOMEIMPROVEMENT'])
    loan_int_rate = st.number_input('Loan Interest Rate', min_value=0.0, max_value=30.0, value=12.0)
    loan_percent_income = st.number_input('Loan Percentage of Income', min_value=0.0, max_value=1.0, value=0.2)
    cb_person_cred_hist_length = st.number_input('Credit History Length (years)', min_value=0, max_value=30, value=5)
    credit_score = st.number_input('Credit Score', min_value=400, max_value=850, value=650)
    previous_loan_defaults_on_file = st.selectbox('Previous Loan Defaults on File', ['Yes', 'No'])

    # Transform the user input into the correct format for prediction
    person_gender_encoded = label_encoder_gender.transform([person_gender])[0]
    person_education_encoded = ordinal_encoder_education.transform([person_education])[0]
    person_home_ownership_encoded = label_encoder_home.transform([person_home_ownership])[0]
    loan_intent_encoded = label_encoder_loan_intent.transform([loan_intent])[0]
    previous_loan_defaults_encoded = label_encoder_defaults.transform([previous_loan_defaults_on_file])[0]

    # Prepare the input data for the model
    input_data = pd.DataFrame([[person_age, person_gender_encoded, person_education_encoded, person_income,
                                person_emp_exp, person_home_ownership_encoded, loan_amnt, loan_intent_encoded,
                                loan_int_rate, loan_percent_income, cb_person_cred_hist_length, credit_score,
                                previous_loan_defaults_encoded]],
                              columns=['person_age', 'person_gender', 'person_education', 'person_income',
                                       'person_emp_exp', 'person_home_ownership', 'loan_amnt', 'loan_intent',
                                       'loan_int_rate', 'loan_percent_income', 'cb_person_cred_hist_length',
                                       'credit_score', 'previous_loan_defaults_on_file'])

    # Make a prediction using the trained model
    prediction = model.predict(input_data)

    # Display the prediction result
    if prediction == 1:
        st.write('The prediction is: *Default*')
    else:
        st.write('The prediction is: *No Default*')
